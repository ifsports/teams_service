"""change the type of user_id to str

Revision ID: 12a81c2ca1b4
Revises: 99dfcbe50a27
Create Date: 2025-06-01 18:32:52.713730

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '12a81c2ca1b4'
down_revision: Union[str, None] = '99dfcbe50a27'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema: Change user_id from UUID to String."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('team_members', 'user_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.String(), # Você pode especificar um tamanho, ex: sa.String(255)
               existing_nullable=False, # Assumindo que a PK não permite nulos
               # primary_key=True não é um argumento direto aqui, a alteração de tipo mantém a PK
               )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema: Change user_id from String back to UUID."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('team_members', 'user_id',
               existing_type=sa.String(), # O tipo que foi definido no upgrade
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               # Para PostgreSQL, você precisará de uma cláusula USING para converter String de volta para UUID.
               # Isso assume que as strings na coluna user_id são representações válidas de UUIDs.
               postgresql_using='user_id::uuid'
               )
    # ### end Alembic commands ###